<?php
/*
 * This file is part of FacturaSctipts
 * Copyright (C) 2014-2015  Carlos Garcia Gomez  neorazorx@gmail.com
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/*require_once 'plugins/facturacion_base/extras/fs_pdf.php';*/

require_once 'plugins/mi_albaran_venta/fpdf17/fs_av_fpdf.php';

require_once 'extras/phpmailer/class.phpmailer.php';
require_once 'extras/phpmailer/class.smtp.php';
require_model('cliente.php');
//require_model('cuenta_banco.php');
//require_model('cuenta_banco_cliente.php');
require_model('forma_pago.php');

require_model('pais.php');
require_model('mi_cuenta_banco_empresa.php');
require_model('mi_cuenta_banco_cliente.php');
require_model('agencia_transporte.php');

/**
 * Esta clase agrupa los procedimientos de imprimir/enviar albaranes y facturas.
 */
class mi_ventas_imprimir extends fs_controller
{
   public $albaran;
   public $cliente;
   public $factura;
   public $impresion;
   public $impuesto;
   
   private $logo;
   
   public function __construct()
   {
      parent::__construct(__CLASS__, 'imprimir', 'ventas', FALSE, FALSE);
   }
   
   protected function private_core()
   {
      $this->albaran = FALSE;
      $this->cliente = FALSE;
      $this->factura = FALSE;
      $this->impuesto = new impuesto();
      
      if( isset($_REQUEST['albaran']) AND isset($_REQUEST['id']) )
      {
         $alb = new albaran_cliente();
         $this->albaran = $alb->get($_REQUEST['id']);
         if($this->albaran)
         {
            $cliente = new cliente();
            $this->cliente = $cliente->get($this->albaran->codcliente);
         }
         
         if( isset($_POST['email']) )
         {
            $this->enviar_email('albaran');
         }
         else
            $this->generar_pdf_albaran();
      }
      else if( isset($_REQUEST['factura']) AND isset($_REQUEST['id']) )
      {
         $fac = new factura_cliente();
         $this->factura = $fac->get($_REQUEST['id']);
         if($this->factura)
         {
            $cliente = new cliente();
            $this->cliente = $cliente->get($this->factura->codcliente);
         }
         
         if( isset($_POST['email']) )
         {
            $this->enviar_email('factura', $_REQUEST['tipo']);
         }
         else
            $this->generar_pdf_factura($_REQUEST['tipo']);
      }
      else if( isset($_REQUEST['albaranO']) AND isset($_REQUEST['id']) )
      {
         $alb = new albaran_cliente();
         $this->albaran = $alb->get($_REQUEST['id']);
         if($this->albaran)
         {
            $cliente = new cliente();
            $this->cliente = $cliente->get($this->albaran->codcliente);
         }
         
         if( isset($_POST['email']) )
         {
            $this->enviar_email('albaran');
         }
         else
            $this->generar_pdf_albaran_sin_valorar();
      }
  
      
      $this->share_extensions();
   }
   
   private function share_extensions()
   {
      $extensiones = array(
          array(
              'name' => 'imprimir_albaran',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_albaran',
              'type' => 'pdf',
              'text' => 'Mi ' . ucfirst(FS_ALBARAN).' valorado',
              'params' => '&albaran=TRUE'
          ),
          array(
              'name' => 'email_albaran',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_albaran',
              'type' => 'email',
              'text' => ucfirst(FS_ALBARAN).' simple',
              'params' => '&albaran=TRUE'
          ),
          array(
              'name' => 'imprimir_albaran_sin_valorar',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_albaran',
              'type' => 'pdf',
              'text' => 'Mi ' . ucfirst(FS_ALBARAN).' sin valorar',
              'params' => '&albaranO=TRUE'
          ),
          /*array(
              'name' => 'imprimir_factura',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_factura',
              'type' => 'pdf',
              'text' => 'Factura simple',
              'params' => '&factura=TRUE&tipo=simple'
          ),*/
          /*array(
              'name' => 'imprimir_factura_firma',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_factura',
              'type' => 'pdf',
              'text' => 'Factura con firma',
              'params' => '&factura=TRUE&tipo=firma'
          ),*/
          /*array(
              'name' => 'imprimir_factura_carta',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_factura',
              'type' => 'pdf',
              'text' => 'Modelo carta',
              'params' => '&factura=TRUE&tipo=carta'
          ),*/
          array(
              'name' => 'email_factura',
              'page_from' => __CLASS__,
              'page_to' => 'ventas_factura',
              'type' => 'email',
              'text' => 'Factura por email',
              'params' => '&factura=TRUE&tipo=email'
          )
      );
      foreach($extensiones as $ext)
      {
         $fsext = new fs_extension($ext);
         if( !$fsext->save() )
         {
            $this->new_error_msg('Error al guardar la extensión '.$ext['name']);
         }
      }
   }
   
   private function generar_pdf_cabecera(&$pdf_doc, &$lppag)
   {
      /// ¿Añadimos el logo?
      if($this->logo)
      {
         if( function_exists('imagecreatefromstring') )
         {
            $pdf_doc->pdf->ezImage($this->logo, 0, 150, 'none');
            $lppag -= 2; /// si metemos el logo, caben menos líneas
         }
         else
         {
            die('ERROR: no se encuentra la función imagecreatefromstring(). '
                    . 'Y por tanto no se puede usar el logotipo en los documentos.');
         }
      }
      else
      {
         $pdf_doc->pdf->ezText("<b>".$this->empresa->nombre."</b>", 16, array('justification' => 'center'));
         $pdf_doc->pdf->ezText(FS_CIFNIF.": ".$this->empresa->cifnif, 8, array('justification' => 'center'));
         
         $direccion = $this->empresa->direccion;
         if($this->empresa->codpostal)
         {
            $direccion .= ' - ' . $this->empresa->codpostal;
         }
         
         if($this->empresa->ciudad)
         {
            $direccion .= ' - ' . $this->empresa->ciudad;
         }
         
         if($this->empresa->provincia)
         {
            $direccion .= ' (' . $this->empresa->provincia . ')';
         }
         
         if($this->empresa->telefono)
         {
            $direccion .= ' - Teléfono: ' . $this->empresa->telefono;
         }
         
         $pdf_doc->pdf->ezText($this->fix_html($direccion), 9, array('justification' => 'center'));
      }
   }
   
   private function generar_pdf_lineas(&$pdf_doc, &$lineas, &$linea_actual, &$lppag, &$documento)
   {
      if($this->impresion['print_dto'])
      {
         $this->impresion['print_dto'] = FALSE;
         
         /// leemos las líneas para ver si de verdad mostramos los descuentos
         foreach($lineas as $lin)
         {
            if($lin->dtopor != 0)
            {
               $this->impresion['print_dto'] = TRUE;
               break;
            }
         }
      }
      
      $multi_iva = FALSE;
      $multi_re = FALSE;
      $multi_irpf = FALSE;
      $iva = FALSE;
      $re = FALSE;
      $irpf = FALSE;
      /// leemos las líneas para ver si hay que mostrar los tipos de iva, re o irpf
      foreach($lineas as $lin)
      {
         if($iva === FALSE)
         {
            $iva = $lin->iva;
         }
         else if($lin->iva != $iva)
         {
            $multi_iva = TRUE;
         }
         
         if($re === FALSE)
         {
            $re = $lin->recargo;
         }
         else if($lin->recargo != $re)
         {
            $multi_re = TRUE;
         }
         
         if($irpf === FALSE)
         {
            $irpf = $lin->irpf;
         }
         else if($lin->irpf != $irpf)
         {
            $multi_irpf = TRUE;
         }
      }
      
      /*
       * Creamos la tabla con las lineas del documento
       */
      $pdf_doc->new_table();
      $table_header = array(
          'alb' => '<b>'.ucfirst(FS_ALBARAN).'</b>',
          'descripcion' => '<b>Ref. + Descripción</b>',
          'cantidad' => '<b>Cant.</b>',
          'pvp' => '<b>PVP</b>',
      );
      
      /// ¿Desactivamos la columna de albaran?
      if( get_class($documento) == 'factura_cliente' )
      {
         if($this->impresion['print_alb'])
         {
            /// aunque esté activada, si la factura no viene de un albaran, la desactivamos
            $this->impresion['print_alb'] = FALSE;
            foreach($lineas as $lin)
            {
               if($lin->idalbaran)
               {
                  $this->impresion['print_alb'] = TRUE;
                  break;
               }
            }
         }
         
         if( !$this->impresion['print_alb'] )
         {
            unset($table_header['alb']);
         }
      }
      else
      {
         unset($table_header['alb']);
      }
      
      if($this->impresion['print_dto'])
      {
         $table_header['dto'] = '<b>Dto.</b>';
      }
      
      if($multi_iva)
      {
         $table_header['iva'] = '<b>'.FS_IVA.'</b>';
      }
      
      if($multi_re)
      {
         $table_header['re'] = '<b>R.E.</b>';
      }
      
      if($multi_irpf)
      {
         $table_header['irpf'] = '<b>'.FS_IRPF.'</b>';
      }
      
      $table_header['importe'] = '<b>Importe</b>';
      $pdf_doc->add_table_header($table_header);
      
      for($i = $linea_actual; (($linea_actual < ($lppag + $i)) AND ($linea_actual < count($lineas)));)
      {
         $descripcion = $this->fix_html($lineas[$linea_actual]->descripcion);
         if( !is_null($lineas[$linea_actual]->referencia) )
         {
            $descripcion = '<b>'.$lineas[$linea_actual]->referencia.'</b> '.$descripcion;
         }
         
         $fila = array(
             'alb' => '-',
             'cantidad' => $lineas[$linea_actual]->cantidad,
             'descripcion' => $descripcion,
             'pvp' => $this->show_precio($lineas[$linea_actual]->pvpunitario, $documento->coddivisa),
             'dto' => $this->show_numero($lineas[$linea_actual]->dtopor) . " %",
             'iva' => $this->show_numero($lineas[$linea_actual]->iva) . " %",
             're' => $this->show_numero($lineas[$linea_actual]->recargo) . " %",
             'irpf' => $this->show_numero($lineas[$linea_actual]->irpf) . " %",
             'importe' => $this->show_precio($lineas[$linea_actual]->pvptotal, $documento->coddivisa)
         );
         
         if( get_class($lineas[$linea_actual]) == 'linea_factura_cliente' )
         {
            $fila['alb'] = $lineas[$linea_actual]->albaran_numero();
         }
         
         $pdf_doc->add_table_row($fila);
         $linea_actual++;
      }
      
      $pdf_doc->save_table(
              array(
                  'fontSize' => 8,
                  'cols' => array(
                      'cantidad' => array('justification' => 'right'),
                      'pvp' => array('justification' => 'right'),
                      'dto' => array('justification' => 'right'),
                      'iva' => array('justification' => 'right'),
                      're' => array('justification' => 'right'),
                      'irpf' => array('justification' => 'right'),
                      'importe' => array('justification' => 'right')
                  ),
                  'width' => 520,
                  'shaded' => 0
              )
      );
   }
   
   private function generar_pdf_albaran($archivo = FALSE)
   {
       //Inicio albaran detallado
      ob_end_clean();
      $pdf_doc = new PDF_MC_Table('P', 'mm', 'A4');
      define('EEURO', chr(128));
      
      
      $pdf_doc->SetTitle('Alb.Venta: ' . $this->albaran->codigo)/*. " " . $this->factura->numero2)*/;
      $pdf_doc->SetSubject('Alb.cliente: ' . $this->albaran->nombrecliente);
      $pdf_doc->SetAuthor($this->empresa->nombre);
      $pdf_doc->SetCreator('FacturaSctipts V_' . $this->version());

      $pdf_doc->Open();
      $pdf_doc->AliasNbPages();
      $pdf_doc->SetAutoPageBreak(true, 40);
      
      // Definimos el color de relleno (gris, rojo, verde, azul)
      $pdf_doc->SetColorRelleno('gris');
      
      /// Definimos todos los datos de la cabecera de la factura
      /// Datos de la empresa
      $pdf_doc->fde_nombre = $this->empresa->nombre;
      $pdf_doc->fde_FS_CIFNIF = FS_CIFNIF;
      $pdf_doc->fde_cifnif = $this->empresa->cifnif;
      $pdf_doc->fde_direccion = $this->empresa->direccion;
      $pdf_doc->fde_codpostal = $this->empresa->codpostal;
      $pdf_doc->fde_ciudad = $this->empresa->ciudad;
      $pdf_doc->fde_provincia = $this->empresa->provincia;
      $pdf_doc->fde_telefono = 'Teléfono: ' . $this->empresa->telefono;
      $pdf_doc->fde_fax = 'Fax: ' . $this->empresa->fax;
      $pdf_doc->fde_email = $this->empresa->email;
      $pdf_doc->fde_web = $this->empresa->web;
      $pdf_doc->fde_piefactura = $this->empresa->pie_factura;

      /// Insertamos el Logo y Marca de Agua
      if( file_exists(FS_MYDOCS.'images/logo.png') OR file_exists(FS_MYDOCS.'images/logo.jpg') )
      {
         $pdf_doc->fdf_verlogotipo = '1'; // 1/0 --> Mostrar Logotipo
         $pdf_doc->fdf_Xlogotipo = '10'; // Valor X para Logotipo
         $pdf_doc->fdf_Ylogotipo = '10'; // Valor Y para Logotipo
         $pdf_doc->fdf_vermarcaagua = '1'; // 1/0 --> Mostrar Marca de Agua
         $pdf_doc->fdf_Xmarcaagua = '25'; // Valor X para Marca de Agua
         $pdf_doc->fdf_Ymarcaagua = '110'; // Valor Y para Marca de Agua
      }
      else
      {
         $pdf_doc->fdf_verlogotipo = '0';
         $pdf_doc->fdf_Xlogotipo = '0';
         $pdf_doc->fdf_Ylogotipo = '0';
         $pdf_doc->fdf_vermarcaagua = '0';
         $pdf_doc->fdf_Xmarcaagua = '0';
         $pdf_doc->fdf_Ymarcaagua = '0';
      }
      
      // Tipo de Documento
      $pdf_doc->fdf_tipodocumento = 'ALBARAN'; // (FACTURA, FACTURA PROFORMA, ¿ALBARAN, PRESUPUESTO?...)
      $pdf_doc->fdf_codigo = $this->albaran->codigo;
      // Fecha, Codigo cliente y observaciones del albaran
      $pdf_doc->fdf_fecha = $this->albaran->fecha;
      $pdf_doc->fdf_codcliente = $this->albaran->codcliente;
      $pdf_doc->fdf_observaciones = utf8_decode( $this->fix_html($this->albaran->observaciones) );
    
     // Datos del Cliente
      $pdf_doc->fdf_nombrecliente = $this->fix_html($this->albaran->nombrecliente);
      $pdf_doc->fdf_FS_CIFNIF = FS_CIFNIF;
      $pdf_doc->fdf_cifnif = $this->albaran->cifnif;         
      $pdf_doc->fdf_telefono1 = $this->cliente->telefono1;
      $pdf_doc->fdf_telefono2 = $this->cliente->telefono2;
      $pdf_doc->fdf_fax = $this->cliente->fax;
      $pdf_doc->fdf_email = $this->cliente->email;
      if ($this->albaran->envio_direccion){
        if ($this->albaran->envio_nombre!=NULL or $this->albaran->envio_apellidos!=NULL){
            $pdf_doc->fdf_nombrecliente = $this->fix_html($this->albaran->envio_nombre).' '.$this->fix_html($this->albaran->envio_apellidos);
            $pdf_doc->fdf_cifnif = NULL;
            $pdf_doc->fdf_telefono1 = ' ';
            $pdf_doc->fdf_telefono2 = ' ';
            $pdf_doc->fdf_fax = ' ';
            $pdf_doc->fdf_email = ' ';
        }
        $pdf_doc->fdf_direccion = $this->fix_html($this->albaran->envio_direccion);
        $pdf_doc->fdf_codpostal = $this->albaran->envio_codpostal;
        $pdf_doc->fdf_ciudad = $this->albaran->envio_ciudad;
        $pdf_doc->fdf_provincia = $this->albaran->envio_provincia;
      } else {
        $pdf_doc->fdf_direccion = $this->fix_html($this->albaran->direccion);
        $pdf_doc->fdf_codpostal = $this->albaran->codpostal;
        $pdf_doc->fdf_ciudad = $this->albaran->ciudad;
        $pdf_doc->fdf_provincia = $this->albaran->provincia;
      }
      
      $pdf_doc->fdf_epago = $pdf_doc->fdf_divisa = $pdf_doc->fdf_pais = '';
      
      // Forma de Pago de la Factura
      $pago = new forma_pago();
      $epago = $pago->get($this->albaran->codpago);
      if ($epago) {
         $pdf_doc->fdf_epago = $epago->descripcion;
         if ($this->albaran->codpago == "CONT" OR $this->albaran->codpago == "T30D" OR $this->albaran->codpago == "ANTICIPADO" OR $this->albaran->codpago == "T60D" OR $this->albaran->codpago == "T85D" OR $this->albaran->codpago == "T30DP")
         {
             $banco = new cuenta_banco_empresa();
             $ebanco = $banco->get($epago->codcuenta);
             $pdf_doc->fdf_cuentapago = " " . $ebanco->descripcion . " - " . $ebanco->iban . " - " . $ebanco->swift;
         } else {
             $banco = new cuenta_banco_cliente();
             $ebanco = $banco->get_para_impresion($this->albaran->codcliente);
             $pdf_doc->fdf_cuentapago = " " . $ebanco->descripcion . " - " . $ebanco->iban . " - " . $ebanco->swift;
         }  
      }

      // Divisa de la Factura
      $divisa = new divisa();
      $edivisa = $divisa->get($this->albaran->coddivisa);
      if ($edivisa) {
         $pdf_doc->fdf_divisa = $edivisa->descripcion;
      }

      // Pais de la Factura
      $pais = new pais();
      $epais = $pais->get($this->albaran->codpais);
      if ($epais) {
         $pdf_doc->fdf_pais = $epais->nombre;
      }
      // Agencia transporte 
      $agencia = new agencia_transporte();
      $eagencia = $agencia->get($this->albaran->envio_codtrans);
      if ($eagencia) {
         $pdf_doc->fdf_agencia = $eagencia->nombre;
      } else {
          $pdf_doc->fdf_agencia = "SUS MEDIOS";
      }
      
      // Cabecera Titulos Columnas
      $pdf_doc->Setdatoscab(array('ART.','DESCRIPCI'.chr(211).'N', 'CANT', 'PRECIO', 'DTO', 'NETO', 'SUBTOTAL'));
      $pdf_doc->SetWidths(array(18, 90, 10, 20, 10, 20, 22));
      $pdf_doc->SetAligns(array('L', 'L','R', 'R', 'R', 'R', 'R'));
      $pdf_doc->SetColors(array('0|0|0', '0|0|0', '0|0|0', '0|0|0', '0|0|0', '0|0|0'));

      /// Definimos todos los datos del PIE de la factura
      /// Lineas de IVA
      $lineas_iva = $this->get_lineas_iva();
      if( count($lineas_iva) > 3 )
      {
         $pdf_doc->fdf_lineasiva = $lineas_iva;
      }
      else
      {
         $filaiva = array();
         $totaliva = 0;
         $i = 0;
         foreach($lineas_iva as $li)
         {
            $i++;
            $filaiva[$i][0] = ($li->iva) ? FS_IVA . $li->iva : '';
            $etemp = round($li->neto,2);
            $filaiva[$i][1] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
            $filaiva[$i][2] = ($li->iva) ? $li->iva . "%" : '';
            $etemp = round($li->totaliva,2);
            $filaiva[$i][3] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
            $filaiva[$i][4] = ($li->recargo) ? $li->recargo . "%" : '';
            $etemp = round($li->totalrecargo,2);
            $filaiva[$i][5] = ($etemp) ? $this->ckeckEuro($etemp) : '';
            $totaliva = totaliva + $etemp;
            $filaiva[$i][6] = ''; //// POR CREARRRRRR
            $filaiva[$i][7] = ''; //// POR CREARRRRRR
            $etemp = round($li->totallinea,2);
            $filaiva[$i][8] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
         }
         
         if($filaiva)
         {
            $filaiva[1][6] = $this->albaran->irpf.' %';
            $etemp = round($this->albaran->totalirpf,2);
            $totaliva = $totaliva - $etemp;
            $filaiva[1][7] = ($etemp) ? $this->ckeckEuro($etemp) : '';
         }
         
         $pdf_doc->fdf_lineasiva = $filaiva;
      }
      // Total factura numerico
      $etemp = round($this->albaran->total,2);
      $pdf_doc->fdf_numtotal = $this->ckeckEuro($etemp);

      // Total factura numeros a texto
      $pdf_doc->fdf_textotal = $this->albaran->total;

      /// Agregamos la pagina inicial de la factura
      $pdf_doc->AddPage();
      
      // Lineas del Albarán
      $lineas = $this->albaran->get_lineas();
         
      if ($lineas) {
         $neto = 0;
         $eped = "INICIO";
         for ($i = 0; $i < count($lineas); $i++) {
            $neto += $lineas[$i]->pvptotal;
            $pdf_doc->neto = $this->ckeckEuro($neto);

            $articulo = new articulo();
            $art = $articulo->get($lineas[$i]->referencia);
            if ($art) {
               $observa = "\n" . utf8_decode( $this->fix_html($art->observaciones) );
            } else {
               // $observa = null; // No mostrar mensaje de error
               $observa = "\n";
            }
            $eart = utf8_decode( $this->fix_html($art->referencia));
                if ($eped != $this->albaran->numero2){
                    $eped = $this->albaran->numero2;
                    $lafila = array(
                    '0' => "\n" . $lineas[$i]->referencia,
                    '1' => "Su pedido: " . $this->albaran->numero2 . "\n" . utf8_decode($lineas[$i]->descripcion) . $observa,
                    '2' => "\n" . utf8_decode($lineas[$i]->cantidad),
                    '3' => "\n" . $this->ckeckEuro($lineas[$i]->pvpunitario),
                    '4' => "\n" . utf8_decode($lineas[$i]->dtopor),
                    '5' => "\n" . $this->ckeckEuro(($lineas[$i]->pvpunitario)*(1-$lineas[$i]->dtopor/100)),
                    '6' => "\n" . $this->ckeckEuro($lineas[$i]->pvptotal),
                    );
                } else {
                    $lafila = array(
                    '0' => $lineas[$i]->referencia,
                    '1' => utf8_decode($lineas[$i]->descripcion) . $observa,
                    '2' => utf8_decode($lineas[$i]->cantidad),
                    '3' => $this->ckeckEuro($lineas[$i]->pvpunitario),
                    '4' => utf8_decode($lineas[$i]->dtopor),
                    '5' => $this->ckeckEuro(($lineas[$i]->pvpunitario)*(1-$lineas[$i]->dtopor/100)),
                    '6' => $this->ckeckEuro($lineas[$i]->pvptotal),
                    );
                }
            
            $pdf_doc->Row($lafila, '1'); // Row(array, Descripcion del Articulo -- ultimo valor a imprimir)
         }
         $pdf_doc->piepagina = true;
      }
       // Damos salida al archivo PDF
      if ($archivo)
      {
         if (!file_exists('tmp/' . FS_TMP_NAME . 'enviar'))
         {
            mkdir('tmp/' . FS_TMP_NAME . 'enviar');
         }
         
         $pdf_doc->Output('tmp/' . FS_TMP_NAME . 'enviar/' . $archivo, 'F');
      }
      else
      {
        $pdf_doc->Output('Albaran n'.chr(176). ' ' . $this->albaran->codigo . '.pdf','I');      }
   }
   
   private function generar_pdf_albaran_sin_valorar($archivo = FALSE)
   {
      //Inicio albaran detallado
      ob_end_clean();
      $pdf_doc = new PDF_MC_Table('P', 'mm', 'A4');
      define('EEURO', chr(128));
      
      
      $pdf_doc->SetTitle('Alb.Venta no valorado: ' . $this->albaran->codigo)/*. " " . $this->factura->numero2)*/;
      $pdf_doc->SetSubject('Alb.cliente: ' . $this->albaran->nombrecliente);
      $pdf_doc->SetAuthor($this->empresa->nombre);
      $pdf_doc->SetCreator('FacturaSctipts V_' . $this->version());

      $pdf_doc->Open();
      $pdf_doc->AliasNbPages();
      $pdf_doc->SetAutoPageBreak(true, 40);
      
      // Definimos el color de relleno (gris, rojo, verde, azul)
      $pdf_doc->SetColorRelleno('gris');
      
      /// Definimos todos los datos de la cabecera de la factura
      /// Datos de la empresa
      $pdf_doc->fde_nombre = $this->empresa->nombre;
      $pdf_doc->fde_FS_CIFNIF = FS_CIFNIF;
      $pdf_doc->fde_cifnif = $this->empresa->cifnif;
      $pdf_doc->fde_direccion = $this->empresa->direccion;
      $pdf_doc->fde_codpostal = $this->empresa->codpostal;
      $pdf_doc->fde_ciudad = $this->empresa->ciudad;
      $pdf_doc->fde_provincia = $this->empresa->provincia;
      $pdf_doc->fde_telefono = 'Teléfono: ' . $this->empresa->telefono;
      $pdf_doc->fde_fax = 'Fax: ' . $this->empresa->fax;
      $pdf_doc->fde_email = $this->empresa->email;
      $pdf_doc->fde_web = $this->empresa->web;
      $pdf_doc->fde_piefactura = $this->empresa->pie_factura;

      /// Insertamos el Logo y Marca de Agua
      if( file_exists(FS_MYDOCS.'images/logo.png') OR file_exists(FS_MYDOCS.'images/logo.jpg') )
      {
         $pdf_doc->fdf_verlogotipo = '1'; // 1/0 --> Mostrar Logotipo
         $pdf_doc->fdf_Xlogotipo = '10'; // Valor X para Logotipo
         $pdf_doc->fdf_Ylogotipo = '10'; // Valor Y para Logotipo
         $pdf_doc->fdf_vermarcaagua = '1'; // 1/0 --> Mostrar Marca de Agua
         $pdf_doc->fdf_Xmarcaagua = '25'; // Valor X para Marca de Agua
         $pdf_doc->fdf_Ymarcaagua = '110'; // Valor Y para Marca de Agua
      }
      else
      {
         $pdf_doc->fdf_verlogotipo = '0';
         $pdf_doc->fdf_Xlogotipo = '0';
         $pdf_doc->fdf_Ylogotipo = '0';
         $pdf_doc->fdf_vermarcaagua = '0';
         $pdf_doc->fdf_Xmarcaagua = '0';
         $pdf_doc->fdf_Ymarcaagua = '0';
      }
      
      // Tipo de Documento
      $pdf_doc->fdf_tipodocumento = 'ALBARAN'; // (FACTURA, FACTURA PROFORMA, ¿ALBARAN, PRESUPUESTO?...)
      $pdf_doc->fdf_codigo = $this->albaran->codigo 
/*No sé para que lo usan . " " . $this->factura->numero2*/;

      // Fecha, Codigo cliente y observaciones del albaran
      $pdf_doc->fdf_fecha = $this->albaran->fecha;
      $pdf_doc->fdf_codcliente = $this->albaran->codcliente;
      $pdf_doc->fdf_observaciones = utf8_decode( $this->fix_html($this->albaran->observaciones) );
    
     // Datos del Cliente
      $pdf_doc->fdf_nombrecliente = $this->fix_html($this->albaran->nombrecliente);
      $pdf_doc->fdf_FS_CIFNIF = FS_CIFNIF;
      $pdf_doc->fdf_cifnif = $this->albaran->cifnif;         
      $pdf_doc->fdf_telefono1 = $this->cliente->telefono1;
      $pdf_doc->fdf_telefono2 = $this->cliente->telefono2;
      $pdf_doc->fdf_fax = $this->cliente->fax;
      $pdf_doc->fdf_email = $this->cliente->email;
      if ($this->albaran->envio_direccion){
        if ($this->albaran->envio_nombre!=NULL or $this->albaran->envio_apellidos!=NULL){
            $pdf_doc->fdf_nombrecliente = $this->fix_html($this->albaran->envio_nombre).' '.$this->fix_html($this->albaran->envio_apellidos);
            $pdf_doc->fdf_cifnif = NULL;
            $pdf_doc->fdf_telefono1 = ' ';
            $pdf_doc->fdf_telefono2 = ' ';
            $pdf_doc->fdf_fax = ' ';
            $pdf_doc->fdf_email = ' ';
        }
        $pdf_doc->fdf_direccion = $this->fix_html($this->albaran->envio_direccion);
        $pdf_doc->fdf_codpostal = $this->albaran->envio_codpostal;
        $pdf_doc->fdf_ciudad = $this->albaran->envio_ciudad;
        $pdf_doc->fdf_provincia = $this->albaran->envio_provincia;
      } else {
        $pdf_doc->fdf_direccion = $this->fix_html($this->albaran->direccion);
        $pdf_doc->fdf_codpostal = $this->albaran->codpostal;
        $pdf_doc->fdf_ciudad = $this->albaran->ciudad;
        $pdf_doc->fdf_provincia = $this->albaran->provincia;
      }
      
      $pdf_doc->fdf_epago = $pdf_doc->fdf_divisa = $pdf_doc->fdf_pais = '';
      
      // Forma de Pago del Pedido
      $pago = new forma_pago();
      $epago = $pago->get($this->albaran->codpago);
      if ($epago) {
         $pdf_doc->fdf_epago = $epago->descripcion;
      }

      // Divisa de la Factura
      $divisa = new divisa();
      $edivisa = $divisa->get($this->albaran->coddivisa);
      if ($edivisa) {
         $pdf_doc->fdf_divisa = $edivisa->descripcion;
      }

      // Pais de la Factura
      $pais = new pais();
      $epais = $pais->get($this->albaran->codpais);
      if ($epais) {
         $pdf_doc->fdf_pais = $epais->nombre;
      }
      // Agencia transporte 
      $agencia = new agencia_transporte();
      $eagencia = $agencia->get($this->albaran->envio_codtrans);
      if ($eagencia) {
         $pdf_doc->fdf_agencia = $eagencia->nombre;
      } else {
          $pdf_doc->fdf_agencia = "SUS MEDIOS";
      }
      
            // Cabecera Titulos Columnas
      $pdf_doc->Setdatoscab(array('ART.','DESCRIPCI'.chr(211).'N', 'CANT', 'PRECIO', 'DTO', 'NETO', 'SUBTOTAL'));
      $pdf_doc->SetWidths(array(18, 90, 10, 20, 10, 20, 22));
      $pdf_doc->SetAligns(array('L', 'L','R', 'R', 'R', 'R', 'R'));
      $pdf_doc->SetColors(array('0|0|0', '0|0|0', '0|0|0', '0|0|0', '0|0|0', '0|0|0'));
      /// Definimos todos los datos del PIE de la factura
      /// Lineas de IVA
      $lineas_iva = $this->get_lineas_iva();
      if( count($lineas_iva) > 3 )
      {
         $pdf_doc->fdf_lineasiva = $lineas_iva;
      }
      else
      {
         $filaiva = array();
         $totaliva = 0;
         $i = 0;
         foreach($lineas_iva as $li)
         {
            $i++;
            $filaiva[$i][0] = ($li->iva) ? FS_IVA . $li->iva : '';
            $etemp = round(0,2);
            $filaiva[$i][1] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
            $filaiva[$i][2] = ($li->iva) ? $li->iva . "%" : '';
            $etemp = round(0,2);
            $filaiva[$i][3] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
            $filaiva[$i][4] = ($li->recargo) ? $li->recargo . "%" : '';
            $etemp = round(0,2);
            $filaiva[$i][5] = ($etemp) ? $this->ckeckEuro($etemp) : '';
            $totaliva = totaliva + $etemp;
            $filaiva[$i][6] = ''; //// POR CREARRRRRR
            $filaiva[$i][7] = ''; //// POR CREARRRRRR
            $etemp = round(0,2);
            $filaiva[$i][8] = ($etemp) ? $this->ckeckEuro($etemp) : ''; 
            $totaliva = totaliva + $etemp;
         }
         
         if($filaiva)
         {
            $filaiva[1][6] = $this->albaran->irpf.' %';
            $etemp = round(0,2);
            $totaliva = $totaliva - $etemp;
            $filaiva[1][7] = ($etemp) ? $this->ckeckEuro($etemp) : '';
         }
         
         $pdf_doc->fdf_lineasiva = $filaiva;
      }
      // Total factura numerico
      $etemp = round($this->factura->total,2);
      $pdf_doc->fdf_numtotal = $this->ckeckEuro($totaliva);

      // Total factura numeros a texto
      $pdf_doc->fdf_textotal = $this->albaran->total;

      /// Agregamos la pagina inicial de la factura
      $pdf_doc->AddPage();
      
      // Lineas del albarán
      $lineas = $this->albaran->get_lineas();

      if ($lineas) {
         $neto = 0;
         $eped = "INICIO";
         for ($i = 0; $i < count($lineas); $i++) {
            $neto += $lineas[$i]->pvptotal;
            $pdf_doc->neto = $this->ckeckEuro($neto);

            $articulo = new articulo();
            $art = $articulo->get($lineas[$i]->referencia);
            if ($art) {
               $observa = "\n" . utf8_decode( $this->fix_html($art->observaciones) );
            } else {
               // $observa = null; // No mostrar mensaje de error
               $observa = "\n";
            }
            $eart = utf8_decode( $this->fix_html($art->referencia));
            
                if ($eped != $this->albaran->numero2){
                    $eped = $this->albaran->numero2;
                    $lafila = array(
                    '0' => "\n" . $lineas[$i]->referencia,
                    '1' => "Su pedido: " . $this->albaran->numero2 . "\n" . utf8_decode($lineas[$i]->descripcion) . $observa,
                    '2' => "\n" . utf8_decode($lineas[$i]->cantidad),
                    '3' => "\n" . $this->ckeckEuro(0.00),
                    '4' => "\n" . utf8_decode($lineas[$i]->dtopor),
                    '5' => "\n" . $this->ckeckEuro(0.00),
                    '6' => "\n" . $this->ckeckEuro(0.00),
                    );
                } else {
                    $lafila = array(
                    '0' => $lineas[$i]->referencia,
                    '1' => utf8_decode($lineas[$i]->descripcion) . $observa,
                    '2' => utf8_decode($lineas[$i]->cantidad),
                    '3' => $this->ckeckEuro(0.00),
                    '4' => utf8_decode($lineas[$i]->dtopor),
                    '5' => $this->ckeckEuro(0.00),
                    '6' => $this->ckeckEuro(0.00),
                    );
                }
            $pdf_doc->Row($lafila, '1'); // Row(array, Descripcion del Articulo -- ultimo valor a imprimir)
         }
         $pdf_doc->piepagina = true;
      }
       // Damos salida al archivo PDF
      if ($archivo)
      {
         if (!file_exists('tmp/' . FS_TMP_NAME . 'enviar'))
         {
            mkdir('tmp/' . FS_TMP_NAME . 'enviar');
         }
         
         $pdf_doc->Output('tmp/' . FS_TMP_NAME . 'enviar/' . $archivo, 'F');
      }
      else
      {
         $pdf_doc->Output('Albaran n'.chr(176). ' ' . $this->albaran->codigo . ' sin valorar.pdf','I');
      }
   }
   
   
   private function generar_pdf_factura($tipo='simple', $archivo=FALSE)
   {
      if(!$archivo)
      {
         /// desactivamos la plantilla HTML
         $this->template = FALSE;
      }
      
      /// Creamos el PDF y escribimos sus metadatos
      $pdf_doc = new fs_pdf();
      $pdf_doc->pdf->addInfo('Title', ucfirst(FS_FACTURA).' '.$this->factura->codigo);
      $pdf_doc->pdf->addInfo('Subject', ucfirst(FS_FACTURA).' '.$this->factura->codigo);
      $pdf_doc->pdf->addInfo('Author', $this->empresa->nombre);
      
      $lineas = $this->factura->get_lineas();
      $lineas_iva = $this->factura->get_lineas_iva();
      if($lineas)
      {
         $lineasfact = count($lineas);
         $linea_actual = 0;
         $pagina = 1;
         
         // Imprimimos las páginas necesarias
         while($linea_actual < $lineasfact)
         {
            $lppag = 35; /// líneas por página
            
            /// salto de página
            if($linea_actual > 0)
            {
               $pdf_doc->pdf->ezNewPage();
            }
            
            /*
             * Creamos la cabecera de la página, en este caso para el modelo carta
             */
            if($tipo == 'carta')
            {
               $direccion = $this->factura->nombrecliente."\n".$this->factura->direccion;
               if($this->factura->codpostal AND $this->factura->ciudad)
                  $direccion .= "\n CP: " . $this->factura->codpostal . ' ' . $this->factura->ciudad;
               else if($this->factura->ciudad)
                  $direccion .= "\n" . $this->factura->ciudad;
               
               if($this->factura->provincia)
                  $direccion .= "\n(" . $this->factura->provincia . ")";
               
               $pdf_doc->pdf->ezText("\n\n", 10);
               $pdf_doc->new_table();
               $pdf_doc->add_table_row(
                  array(
                      'campos' => "<b>".ucfirst(FS_FACTURA).":</b>\n<b>Fecha:</b>\n<b>".FS_CIFNIF.":</b>",
                      'factura' => $this->factura->codigo."\n".$this->factura->fecha."\n".$this->factura->cifnif,
                      'cliente' => $this->fix_html($direccion)
                  )
               );
               $pdf_doc->save_table(
                  array(
                      'cols' => array(
                          'campos' => array('justification' => 'right', 'width' => 100),
                          'factura' => array('justification' => 'left'),
                          'cliente' => array('justification' => 'right')
                      ),
                      'showLines' => 0,
                      'width' => 520
                  )
               );
               $pdf_doc->pdf->ezText("\n\n\n", 14);
            }
            else /// esta es la cabecera de la página para los modelos 'simple' y 'firma'
            {
               $this->generar_pdf_cabecera($pdf_doc, $lppag);
               
               /*
                * Esta es la tabla con los datos del cliente:
                * Factura:             Fecha:
                * Cliente:             CIF/NIF:
                * Dirección:           Teléfonos:
                */
               $pdf_doc->new_table();
               
               if($this->factura->idfacturarect)
               {
                  $pdf_doc->add_table_row(
                     array(
                        'campo1' => "<b>".ucfirst(FS_FACTURA_RECTIFICATIVA).":</b>",
                        'dato1' => $this->factura->codigo,
                        'campo2' => "<b>Fecha:</b>",
                        'dato2' => $this->factura->fecha
                     )
                  );
                  $pdf_doc->add_table_row(
                     array(
                        'campo1' => "<b>Original:</b>",
                        'dato1' => $this->factura->codigorect,
                        'campo2' => '',
                        'dato2' => ''
                     )
                  );
               }
               else
               {
                  $pdf_doc->add_table_row(
                     array(
                        'campo1' => "<b>".ucfirst(FS_FACTURA).":</b>",
                        'dato1' => $this->factura->codigo,
                        'campo2' => "<b>Fecha:</b>",
                        'dato2' => $this->factura->fecha
                     )
                  );
               }
               
               $pdf_doc->add_table_row(
                  array(
                     'campo1' => "<b>Cliente:</b>",
                     'dato1' => $this->fix_html($this->factura->nombrecliente),
                     'campo2' => "<b>".FS_CIFNIF.":</b>",
                     'dato2' => $this->factura->cifnif
                  )
               );
               $pdf_doc->add_table_row(
                  array(
                     'campo1' => "<b>Dirección:</b>",
                     'dato1' => $this->factura->direccion.' CP: '.$this->factura->codpostal.' - '.$this->factura->ciudad.
                                 ' ('.$this->factura->provincia.')',
                     'campo2' => "<b>Teléfonos:</b>",
                     'dato2' => $this->cliente->telefono1.'  '.$this->cliente->telefono2
                  )
               );
               $pdf_doc->save_table(
                  array(
                     'cols' => array(
                        'campo1' => array('justification' => 'right'),
                        'dato1' => array('justification' => 'left'),
                        'campo2' => array('justification' => 'right'),
                        'dato2' => array('justification' => 'left')
                     ),
                     'showLines' => 0,
                     'width' => 520,
                     'shaded' => 0
                  )
               );
               $pdf_doc->pdf->ezText("\n", 10);
               
               /// en el tipo 'firma' caben menos líneas
               if($tipo == 'firma')
               {
                  $lppag -= 3;
               }
            }
            
            $this->generar_pdf_lineas($pdf_doc, $lineas, $linea_actual, $lppag, $this->factura);
            
            if( $linea_actual == count($lineas) )
            {
               /*
                * Añadimos la parte de la firma y las observaciones,
                * para el tipo 'firma'
                */
               if($tipo == 'firma')
               {
                  $pdf_doc->pdf->ezText("\n", 9);
                  
                  $pdf_doc->new_table();
                  $pdf_doc->add_table_header(
                     array(
                        'campo1' => "<b>Observaciones</b>",
                        'campo2' => "<b>Firma</b>"
                     )
                  );
                  $pdf_doc->add_table_row(
                     array(
                        'campo1' => $this->fix_html($this->factura->observaciones),
                        'campo2' => ""
                     )
                  );
                  $pdf_doc->save_table(
                     array(
                        'cols' => array(
                           'campo1' => array('justification' => 'left'),
                           'campo2' => array('justification' => 'right', 'width' => 100)
                        ),
                        'showLines' => 4,
                        'width' => 530,
                        'shaded' => 0
                     )
                  );
               }
               else if($this->factura->observaciones != '')
               {
                  $pdf_doc->pdf->ezText("\n".$this->fix_html($this->factura->observaciones), 9);
               }
               
               if(!$this->factura->pagada)
               {
                  $fp0 = new forma_pago();
                  $forma_pago = $fp0->get($this->factura->codpago);
                  if($forma_pago)
                  {
                     $texto_pago = "\n<b>Forma de pago</b>: ".$forma_pago->descripcion;
                     
                     if($forma_pago->domiciliado)
                     {
                        $cbc0 = new cuenta_banco_cliente();
                        $encontrada = FALSE;
                        foreach($cbc0->all_from_cliente($this->factura->codcliente) as $cbc)
                        {
                           if($cbc->iban)
                           {
                              $texto_pago .= "\n<b>Domiciliado en</b>: ".$cbc->iban;
                           }
                           else
                           {
                              $texto_pago .= "\n<b>Domiciliado en</b>: ".$cbc->swift;
                           }
                           $encontrada = TRUE;
                           break;
                        }
                        if(!$encontrada)
                        {
                           $texto_pago .= "\n<b>El cliente no tiene cuenta bancaria asignada.</b>";
                        }
                     }
                     else if($forma_pago->codcuenta)
                     {
                        $cb0 = new cuenta_banco();
                        $cuenta_banco = $cb0->get($forma_pago->codcuenta);
                        if($cuenta_banco)
                        {
                           if($cuenta_banco->iban)
                           {
                              $texto_pago .= "\n<b>IBAN</b>: ".$cuenta_banco->iban;
                           }
                           else
                           {
                              $texto_pago .= "\n<b>SWIFT o BIC</b>: ".$cuenta_banco->swift;
                           }
                        }
                     }
                     
                     $texto_pago .= "\n<b>Vencimiento</b>: ".$this->factura->vencimiento;
                     $pdf_doc->pdf->ezText($texto_pago, 9);
                  }
               }
            }
            
            $pdf_doc->set_y(80);
            
            /*
             * Rellenamos la última tabla de la página:
             * 
             * Página            Neto    IVA   Total
             */
            $pdf_doc->new_table();
            $titulo = array('pagina' => '<b>Página</b>', 'neto' => '<b>Neto</b>',);
            $fila = array(
                'pagina' => $pagina . '/' . ceil(count($lineas) / $lppag),
                'neto' => $this->show_precio($this->factura->neto, $this->factura->coddivisa),
            );
            $opciones = array(
                'cols' => array(
                    'neto' => array('justification' => 'right'),
                ),
                'showLines' => 4,
                'width' => 520
            );
            foreach($lineas_iva as $li)
            {
               $imp = $this->impuesto->get($li->codimpuesto);
               if($imp)
               {
                  $titulo['iva'.$li->iva] = '<b>'.$imp->descripcion.'</b>';
               }
               else
                  $titulo['iva'.$li->iva] = '<b>'.FS_IVA.' '.$li->iva.'%</b>';
               
               $fila['iva'.$li->iva] = $this->show_precio($li->totaliva, $this->factura->coddivisa);
               
               if($li->totalrecargo != 0)
               {
                  $fila['iva'.$li->iva] .= ' (RE: '.$this->show_precio($li->totalrecargo, $this->factura->coddivisa).')';
               }
               
               $opciones['cols']['iva'.$li->iva] = array('justification' => 'right');
            }
            
            if($this->factura->totalirpf != 0)
            {
               $titulo['irpf'] = '<b>'.FS_IRPF.' '.$this->factura->irpf.'%</b>';
               $fila['irpf'] = $this->show_precio($this->factura->totalirpf);
               $opciones['cols']['irpf'] = array('justification' => 'right');
            }
            
            $titulo['liquido'] = '<b>Total</b>';
            $fila['liquido'] = $this->show_precio($this->factura->total, $this->factura->coddivisa);
            $opciones['cols']['liquido'] = array('justification' => 'right');
            $pdf_doc->add_table_header($titulo);
            $pdf_doc->add_table_row($fila);
            $pdf_doc->save_table($opciones);
            
            /// pié de página para la factura
            $pdf_doc->pdf->addText(10, 10, 8, $pdf_doc->center_text($this->fix_html($this->empresa->pie_factura), 153), 0, 1.5);
            
            $pagina++;
         }
      }
      else
      {
         $pdf_doc->pdf->ezText('¡'.ucfirst(FS_FACTURA).' sin líneas!', 20);
      }
      
      if($archivo)
      {
         if( !file_exists('tmp/'.FS_TMP_NAME.'enviar') )
            mkdir('tmp/'.FS_TMP_NAME.'enviar');
         
         $pdf_doc->save('tmp/'.FS_TMP_NAME.'enviar/'.$archivo);
      }
      else
         $pdf_doc->show(FS_FACTURA.'_'.$this->factura->codigo.'.pdf');
   }
   
   private function enviar_email($doc, $tipo='simple')
   {
      if( $this->empresa->can_send_mail() )
      {
         if( $_POST['email'] != $this->cliente->email )
         {
            $this->cliente->email = $_POST['email'];
            $this->cliente->save();
         }
         
         /// obtenemos la configuración extra del email
         $mailop = array(
             'mail_host' => 'smtp.gmail.com',
             'mail_port' => '465',
             'mail_user' => '',
             'mail_enc' => 'ssl'
         );
         $fsvar = new fs_var();
         $mailop = $fsvar->array_get($mailop, FALSE);
         
         if($doc == 'factura')
         {
            $filename = 'factura_'.$this->factura->codigo.'.pdf';
            $this->generar_pdf_factura($tipo, $filename);
         }
         else
         {
            $filename = 'albaran_'.$this->albaran->codigo.'.pdf';
            $this->generar_pdf_albaran($filename);
         }
         
         if( file_exists('tmp/'.FS_TMP_NAME.'enviar/'.$filename) )
         {
            $mail = new PHPMailer();
            $mail->IsSMTP();
            $mail->SMTPAuth = TRUE;
            $mail->SMTPSecure = $mailop['mail_enc'];
            $mail->Host = $mailop['mail_host'];
            $mail->Port = intval($mailop['mail_port']);
            
            $mail->Username = $this->empresa->email;
            if($mailop['mail_user'] != '')
            {
               $mail->Username = $mailop['mail_user'];
            }
            
            $mail->Password = $this->empresa->email_password;
            $mail->From = $this->empresa->email;
            $mail->FromName = $this->user->nick;
            $mail->CharSet = 'UTF-8';
            
            if($doc == 'factura')
            {
               $mail->Subject = $this->empresa->nombre . ': Su factura '.$this->factura->codigo;
               $mail->AltBody = 'Buenos días, le adjunto su factura '.$this->factura->codigo.".\n".$this->empresa->email_firma;
            }
            else
            {
               $mail->Subject = $this->empresa->nombre . ': Su '.FS_ALBARAN.' '.$this->albaran->codigo;
               $mail->AltBody = 'Buenos días, le adjunto su '.FS_ALBARAN.' '.$this->albaran->codigo.".\n".$this->empresa->email_firma;
            }
            
            $mail->WordWrap = 50;
            $mail->MsgHTML( nl2br($_POST['mensaje']) );
            $mail->AddAttachment('tmp/'.FS_TMP_NAME.'enviar/'.$filename);
            $mail->AddAddress($_POST['email'], $this->cliente->razonsocial);
            if( isset($_POST['concopia']) )
            {
               $mail->AddCC($_POST['email_copia'], $this->cliente->razonsocial);
            }
            $mail->IsHTML(TRUE);
            
            if( $mail->Send() )
            {
               $this->new_message('Mensaje enviado correctamente.');
            }
            else
               $this->new_error_msg("Error al enviar el email: " . $mail->ErrorInfo);
            
            unlink('tmp/'.FS_TMP_NAME.'enviar/'.$filename);
         }
         else
            $this->new_error_msg('Imposible generar el PDF.');
      }
   }
   
   private function fix_html($txt)
   {
      $newt = str_replace('&lt;', '<', $txt);
      $newt = str_replace('&gt;', '>', $newt);
      $newt = str_replace('&quot;', '"', $newt);
      $newt = str_replace('&#39;', "'", $newt);
      return $newt;
   }
   
   private function get_lineas_iva()
   {
      
      $linea_iva = new linea_iva_factura_cliente();
      $lineasi = $linea_iva->all_from_factura($this->idfactura);
      /// si no hay lineas de IVA las generamos
      if( !$lineasi )
      {
         $lineas = $this->albaran->get_lineas();
         if($lineas)
         {
            foreach($lineas as $l)
            {
               $i = 0;
               $encontrada = FALSE;
               while($i < count($lineasi))
               {
                  if($l->codimpuesto == $lineasi[$i]->codimpuesto)
                  {
                     $encontrada = TRUE;
                     $lineasi[$i]->neto += $l->pvptotal;
                     $lineasi[$i]->totaliva += ($l->pvptotal*$l->iva)/100;
                     $lineasi[$i]->totalrecargo += ($l->pvptotal*$l->recargo)/100;
                  }
                  $i++;
               }
               if( !$encontrada )
               {
                  $lineasi[$i] = new linea_iva_factura_cliente();
                  $lineasi[$i]->idfactura = $this->idfactura;
                  $lineasi[$i]->codimpuesto = $l->codimpuesto;
                  $lineasi[$i]->iva = $l->iva;
                  $lineasi[$i]->recargo = $l->recargo;
                  $lineasi[$i]->neto = $l->pvptotal;
                  $lineasi[$i]->totaliva = ($l->pvptotal*$l->iva)/100;
                  $lineasi[$i]->totalrecargo = ($l->pvptotal*$l->recargo)/100;
               }
            }
            
            /// redondeamos y guardamos
            if( count($lineasi) == 1 )
            {
               $lineasi[0]->neto = round($lineasi[0]->neto, FS_NF0);
               $lineasi[0]->totaliva = round($lineasi[0]->totaliva, FS_NF0);
               $lineasi[0]->totaliva = round($lineasi[0]->totaliva, FS_NF0);
               $lineasi[0]->totallinea = $lineasi[0]->neto + $lineasi[0]->totaliva + $lineasi[0]->totalrecargo;
               $lineasi[0]->save();
            }
            else
            {
               //
               //Como el neto y el iva se redondean en la factura, al dividirlo
               //en líneas de iva podemos encontrarnos con un descuadre que
               // hay que calcular y solucionar.
               //
               $t_neto = 0;
               $t_iva = 0;
               foreach($lineasi as $li)
               {
                  $li->neto = bround($li->neto, FS_NF0);
                  $li->totaliva = bround($li->totaliva, FS_NF0);
                  $li->totallinea = $li->neto + $li->totaliva;
                  
                  $t_neto += $li->neto;
                  $t_iva += $li->totaliva;
               }
               
               if( !$this->floatcmp($this->neto, $t_neto) )
               {
                  
                   //Sumamos o restamos un céntimo a los netos más altos
                   //hasta que desaparezca el descuadre
                   
                  $diferencia = round( ($this->neto-$t_neto) * 100 );
                  usort($lineasi, function($a, $b) {
                     if($a->totallinea == $b->totallinea)
                        return 0;
                     else
                        return ($a->totallinea < $b->totallinea) ? 1 : -1;
                  });
                  
                  foreach($lineasi as $i => $value)
                  {
                     if($diferencia > 0)
                     {
                        $lineasi[$i]->neto += .01;
                        $diferencia--;
                     }
                     else if($diferencia < 0)
                     {
                        $lineasi[$i]->neto -= .01;
                        $diferencia++;
                     }
                     else
                        break;
                  }
               }
               
               if( !$this->floatcmp($this->totaliva, $t_iva) )
               {
                  //Sumamos o restamos un céntimo a los netos más altos
                  //hasta que desaparezca el descuadre
                  
                  $diferencia = round( ($this->totaliva-$t_iva) * 100 );
                  usort($lineasi, function($a, $b) {
                     if($a->totallinea == $b->totallinea)
                        return 0;
                     else
                        return ($a->totallinea < $b->totallinea) ? 1 : -1;
                  });
                  
                  foreach($lineasi as $i => $value)
                  {
                     if($diferencia > 0)
                     {
                        $lineasi[$i]->totaliva += .01;
                        $diferencia--;
                     }
                     else if($diferencia < 0)
                     {
                        $lineasi[$i]->totaliva -= .01;
                        $diferencia++;
                     }
                     else
                        break;
                  }
               }
               
               foreach($lineasi as $i => $value)
               {
                  $lineasi[$i]->totallinea = $value->neto + $value->totaliva + $value->totalrecargo;
                  $lineasi[$i]->save();
               }
            }
         }
      }
      return $lineasi;
   }
      // Corregir el Bug de fpdf con el Simbolo del Euro ---> €
   public function ckeckEuro($cadena)
   {
      $mostrar = $this->show_precio($cadena, $this->factura->coddivisa);
      $pos = strpos($mostrar, '€');
      if ($pos !== false)
      {
         if (FS_POS_DIVISA == 'right')
         {
            return number_format($cadena, FS_NF0, FS_NF1, FS_NF2) . ' ' . EEURO;
         }
         else
         {
            return EEURO . ' ' . number_format($cadena, FS_NF0, FS_NF1, FS_NF2);
         }
      }
      return $mostrar;
   }
}

